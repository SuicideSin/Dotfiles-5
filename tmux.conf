###############################################################################
# basic config

# use control-a prefix like screen
unbind-key C-b
bind-key C-a send-prefix
set -g prefix C-a

# ensure 256 color compatibility
set -g default-terminal "screen-256color"

# ensure utf-8 compatibility
set -g status-utf8 on
set -g utf8 on


###############################################################################
# extended vim keybindings
# original Daniel Thau.  Public domain.
# Requires tmux 1.3

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind = resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi
set -g status-keys vi

# holy shit stop fucking with my escape key
set -s escape-time 0


# Prefix harder
unbind-key C-b
bind-key C-a send-prefix
set -g prefix C-a

# UTF8 harder
set -g status-utf8 on
set -g utf8 on

# Term properly
set -g default-terminal "screen-256color"

# in order to use `pbcopy` and `pbpaste` on OS X, we need to run reattach-to-user-namespeace
# but on other systems `zsh` is fine
# set-option -g default-command "reattach-to-user-namespace -l zsh"
set -g default-command "which reattach-to-user-namespace > /dev/null 2>&1 && reattach-to-user-namespace -l zsh || zsh"

###############################################################################
# MOUSE SUPPORT (!)

# enable by defaul
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

set -g xterm-keys on

# keybind to turn mouse support on
bind m \
    set -g mode-mouse on \;\
    set -g mouse-resize-pane on \;\
    set -g mouse-select-pane on \;\
    set -g mouse-select-window on \;\
    display 'Mouse: ON'

# keybind to turn mouse support off
bind M \
    set -g mode-mouse off \;\
    set -g mouse-resize-pane off \;\
    set -g mouse-select-pane off \;\
    set -g mouse-select-window off \;\
    display 'Mouse: OFF'

###############################################################################
# vim-tmux-navigator integration.
# Smart pane switching with awareness of vim splits. Hella tight.
# https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
is_vim_or_emacs='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$|emacs.*$"'
bind -n C-h if-shell "$is_vim_or_emacs" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim_or_emacs" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim_or_emacs" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim_or_emacs" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim_or_emacs" "send-keys C-\\" "select-pane -l"
