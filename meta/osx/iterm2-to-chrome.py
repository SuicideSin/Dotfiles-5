#!/usr/bin/env python

# Convert iTerm2 color schemes into Chrome Secure Shell themes.
# Tested with python27 on OS X.
#
# usage: iterm2-to-chrome.py <ITERM2_COLOR_SCHEME>
#
# mac tip:
# you can do `iterm2-to-chrome.py mycolors.itermcolors | pbcopy` and then paste
# directly into the Chrome console!

import sys
import xml.etree.ElementTree as ET
import json


class Color(object):
  """
  represents an Apple color
  """
  def __init__(self):
    self.alpha = 1.0
    self.red = 0.0
    self.blue = 0.0
    self.green = 0.0
    self.color_space = None

  def to_hex(self):
    def as_hex(value):
      i = int(255.0 * value)
      return "%x" % i
    return '#' + as_hex(self.red) + as_hex(self.green) + as_hex(self.blue)


def convert(et):
  """
  convert a full plist file ElementTree to a nice json-like dict of Chrome
  settings
  """
  root = et.getroot()
  plist_dict = root.find('dict')
  d = plist_dict_to_dict(plist_dict)

  # create ansi colors
  ansi_colors = {}
  for i in xrange(16):
    color_dict = d["Ansi {} Color".format(i)]
    ansi_colors[i] = color_dict_to_color(color_dict).to_hex()

  # return full dict thing
  return {
    "color-palette-overrides": ansi_colors,
    "background-color": color_dict_to_color(d['Background Color']).to_hex(),
    "cursor-color": color_dict_to_color(d['Cursor Color']).to_hex(),
    "foreground-color": color_dict_to_color(d['Foreground Color']).to_hex(),
  }


def plist_dict_to_dict(plist_dict):
  """
  convert a plist dict ElementTree element to a python dict, with string keys,
  and ElementTree values.
  """
  result = {}
  cur_key = None
  for elem in plist_dict:
    if elem.tag == 'key':
      cur_key = elem.text
    elif elem.tag is not None:
      result[cur_key] = elem
  return result


def color_dict_to_color(plist_dict):
  """
  convert a python dict with string keys and ElementTree values to a Color.
  """
  result = Color()
  d = plist_dict_to_dict(plist_dict)
  result.red = float(d['Red Component'].text)
  result.blue = float(d['Blue Component'].text)
  result.green = float(d['Green Component'].text)
  result.alpha = float(d['Alpha Component'].text)
  result.color_space = d['Color Space']
  return result


def to_settings_script(settings):
  script = """// generated by iterm2-to-chrome.py
// https://github.com/justjake/Dotfiles

// Instructions:
// 0. open a new Chrome Secure Shell window.
// 1. open the options screen by clicking [Options] in a new window.
// 2. Inspect Element to get a Javascript console.
// 3. paste this whole script into the Inspect Element window.

var prefs = {};

Object.keys(prefs).forEach(k => term_.prefs_.set(k, prefs[k]))
  """
  data = json.dumps(settings, indent=2)
  return script.format(data)


def main():
  if len(sys.argv) < 2:
    print("No file path given on $1. Exiting.")
    print('')
    print("usage: {} SOMETHING.itermcolors".format(sys.argv[0]))
    sys.exit(1)

  f = sys.argv[1]
  root = ET.parse(f)
  json = convert(root)
  js = to_settings_script(json)
  print js

main()
